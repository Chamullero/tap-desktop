
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirportModel
{
    //the class for a type of hub
    [Serializable]
    public class HubType : ISerializable
    {
        [Versioning("price")]
        public double Price { get; set; }
        [Versioning("name")]
        public string Name { get; set; }
        public enum TypeOfHub { Hub, Regional_hub, Focus_city, Fortress_hub }
        [Versioning("type")]
        public TypeOfHub Type { get; set; }
        public HubType(string name, double price, TypeOfHub type)
        {
            this.Name = name;
            this.Price = price;
            this.Type = type;
        }
             private HubType(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the list of hub types
    public class HubTypes
    {
        private static List<HubType> types = new List<HubType>();
        //adds a hub type to the list
        public static void AddHubType(HubType type)
        {
            types.Add(type);
        }
        //clears the list of hub types
        public static void Clear()
        {
            types.Clear();
        }
        //returns all hubtypes
        public static List<HubType> GetHubTypes()
        {
            return types;
        }
        //returns a hub type of a specific type
        public static HubType GetHubType(HubType.TypeOfHub type)
        {
            return types.Find(t => t.Type == type);
        }

    }
}
