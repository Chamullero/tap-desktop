using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TheAirline.Model.AirlineModel;
using TheAirline.Model.GeneralModel;
using TheAirline.Model.AirlinerModel.RouteModel;
using System.Runtime.Serialization;
using System.Reflection;


namespace TheAirline.Model.AirportModel
{
    // chs 11-04-11: changed for the possibility of extending a terminal
    //the class for a gate at an airport   
    [Serializable]
 
    public class Gate : ISerializable
    {
        //public Boolean HasRoute { get; set; }
        //public const int RoutesPerGate = 5;
        [Versioning("airline")]
        public Airline Airline { get; set; }
        [Versioning("date")]
        public DateTime DeliveryDate { get; set; }
        public Gate(DateTime deliveryDate)
        {
             this.DeliveryDate = deliveryDate;
          }
             private Gate(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }

    }
    // chs 11-04-11: changed for the possibility of extending a terminal
   //the collection of gates at an airport
    [Serializable]
    public class Gates : ISerializable
    {
        [Versioning("gates")]
        private List<Gate> TerminalGates;
       
        public int NumberOfGates { get { return this.TerminalGates.Count; } set { ;} }
        public int NumberOfOrderedGates { get { return this.getOrderedGates().Count;} set { ;} }
        public int NumberOfDeliveredGates { get { return this.NumberOfGates - this.NumberOfOrderedGates; } set { ;} }
        public Gates(int numberOfGates, DateTime deliveryDate,Airline airline)
        {
            this.TerminalGates = new List<Gate>();
            for (int i = 0; i < numberOfGates; i++)
            {
                Gate gate = new Gate(deliveryDate);
                gate.Airline = airline;
             
                this.TerminalGates.Add(gate);
            }
        }
        //returns all delivered gats
        public List<Gate> getDeliveredGates()
        {
            return this.TerminalGates.FindAll((delegate(Gate gate) { return gate.DeliveryDate <= GameObject.GetInstance().GameTime; }));
       
        }
        // chs 11-07-11: changed for the possibility of extending a terminal
        //returns the ordered gates
        private List<Gate> getOrderedGates()
        {
            return this.TerminalGates.FindAll((delegate(Gate gate) { return gate.DeliveryDate > GameObject.GetInstance().GameTime; }));
        }
        //returns the list of gates
        public List<Gate> getGates()
        {
            return getDeliveredGates();
        }
        //clears the gates
        public void clear()
        {
            this.TerminalGates = new List<Gate>();
        }
        //adds a gate
        public void addGate(Gate gate)
        {
            this.TerminalGates.Add(gate);

        }
             private Gates(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
}
