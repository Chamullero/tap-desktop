
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.AirlineModel;
using TheAirline.Model.AirportModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirportModel
{
    [Serializable]
    //the class for a contract at an airport for an airline
    public class AirportContract : ISerializable
    {
        [Versioning("airline")]
        public Airline Airline { get; set; }
        [Versioning("airport")]
        public Airport Airport { get; set; }
        [Versioning("date")]
        public DateTime ContractDate { get; set; }
        [Versioning("length")]
        public int Length { get; set; }
        [Versioning("yearlypayment")]
        public double YearlyPayment { get; set; }
        [Versioning("gates")]
        public int NumberOfGates { get; set; }
        [Versioning("isexclusive")]
        public Boolean IsExclusiveDeal { get; set; }
        public int MonthsLeft { get { return getMonthsLeft();} set { ;} }
        [Versioning("terminal")]
        public Terminal Terminal { get; set; }
        [Versioning("expire")]
        public DateTime ExpireDate { get; set; }
        [Versioning("payfull")]
        public Boolean PayFull { get; set; }
        public AirportContract(Airline airline, Airport airport, DateTime date, int numberOfGates, int length, double yearlyPayment,Boolean payFull = false, Boolean isExclusiveDeal = false, Terminal terminal = null)
        {
            this.PayFull = payFull;
            this.Airline = airline;
            this.Airport = airport;
            this.ContractDate = date;
            this.Length = length;
            this.YearlyPayment = yearlyPayment;
            this.NumberOfGates = numberOfGates;
            this.IsExclusiveDeal = isExclusiveDeal;
            this.Terminal = terminal;
            this.ExpireDate = this.ContractDate.AddYears(this.Length);
        }
        //returns the number of months left for the contract
        public int getMonthsLeft()
        {
            return MathHelpers.GetMonthsBetween(GameObject.GetInstance().GameTime, this.ContractDate.AddYears(this.Length));
        }
           private AirportContract(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
}
