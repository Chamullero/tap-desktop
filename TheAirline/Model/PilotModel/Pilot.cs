
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.AirlineModel;
using TheAirline.Model.AirlinerModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.PilotModel
{
    //the class for a pilot
    [Serializable]
    public class Pilot : ISerializable
    {
        
        public enum PilotRating { 
             [EnumMember(Value="A")]A=3, 
             [EnumMember(Value="B")]B=4,
             [EnumMember(Value="C")]C=5, 
             [EnumMember(Value="D")]D=7, 
             [EnumMember(Value="E")]E=10 }
        
        [Versioning("rating")]
        public PilotRating Rating { get; set; }
        
        [Versioning("profile")]
        public PilotProfile Profile { get; set; }
        [Versioning("airline")]
        public Airline Airline { get; set; }
        [Versioning("signeddate")]
        public DateTime AirlineSignedDate { get; set; }
        [Versioning("education")]
        public DateTime EducationTime { get; set; }
        [Versioning("airliner")]
        public FleetAirliner Airliner { get; set; }
        public const int RetirementAge = 55;
         public Pilot(PilotProfile profile, DateTime educationTime, PilotRating rating)
        {
            this.Profile = profile;
            this.EducationTime = educationTime;
            this.Rating = rating;
    
        }
        //sets the airline for a pilot
        public void setAirline(Airline airline, DateTime signDate)
        {
            this.Airline = airline;
            this.AirlineSignedDate = signDate;
        }
        private Pilot(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the list of pilots
    public class Pilots
    {
        private static List<Pilot> pilots = new List<Pilot>();
        //adds a pilot to the list
        public static void AddPilot(Pilot pilot)
        {
            lock (pilots)
            {
                if (pilot != null)
                    pilots.Add(pilot);
            }
        }
        //clears the list of pilots
        public static void Clear()
        {
            pilots.Clear();
        }
        //returns all pilots
        public static List<Pilot> GetPilots()
        {
            return pilots;
        }
        //returns all unassigned pilots
        public static List<Pilot> GetUnassignedPilots()
        {
            var unassigned = pilots.FindAll(p => p.Airline == null);

            if (unassigned.Count < 5)
            {
                GeneralHelpers.CreatePilots(10);

                return GetUnassignedPilots();
            }

            return unassigned;

        }
        public static List<Pilot> GetUnassignedPilots(Predicate<Pilot> match)
        {
            return GetUnassignedPilots().FindAll(match);
        }
        //removes a pilot from the list
        public static void RemovePilot(Pilot pilot)
        {
            pilots.Remove(pilot);
        }
        //counts the number of unassigned pilots
        public static int GetNumberOfUnassignedPilots()
        {
            int pilotsCount = 0;
            lock (pilots)
            {
                pilotsCount = pilots.Count(p => p.Airline == null);
            }
            return pilotsCount;
        }
        //counts the number of pilots
        public static int GetNumberOfPilots() 
        {
            return pilots.Count;
        }
       
    }
}
