using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using TheAirline.Model.GeneralModel.CountryModel.TownModel;
using TheAirline.Model.GeneralModel;
using System.Reflection;
using System.Runtime.Serialization;


namespace TheAirline.Model.PilotModel
{
    //the class for the profile of a pilot
    [Serializable]
    public class PilotProfile : ISerializable
    {
        [Versioning("firstname")]
        public string Firstname { get; set; }
        [Versioning("lastname")]
        public string Lastname { get; set; }
        public string Name { get { return string.Format("{0} {1}", this.Firstname, this.Lastname); } set { ;} }
        
        public int Age { get { return MathHelpers.GetAge(this.Birthdate); } set { ;} }
        [Versioning("town")]
        public Town Town { get; set; }
        [Versioning("birthdate")]
        public DateTime Birthdate { get; set; }
        public PilotProfile(string firstname, string lastname, DateTime birthdate, Town town)
        {
            this.Firstname = firstname;
            this.Lastname = lastname;
            this.Town = town;
            this.Birthdate = birthdate;
  
        }
            private PilotProfile(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
}
