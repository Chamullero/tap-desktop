
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.PilotModel
{
    //the class for the aircraft for training for students
    [Serializable]
    public class TrainingAircraftType : ISerializable
    {
        [Versioning("name")]
        public string Name { get; set; }
        [Versioning("price")]
        private double APrice;
        public double Price { get{return GeneralHelpers.GetInflationPrice(this.APrice);} private set { ;} }
        [Versioning("maxstudents")]
        public int MaxNumberOfStudents { get; set; }
        public TrainingAircraftType(string name, double price, int maxnumberofstudents)
        {
            this.Name = name;
            this.APrice = price;
            this.MaxNumberOfStudents = maxnumberofstudents;
        }
            private TrainingAircraftType(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the list of training aircrafts types
    public class TrainingAircraftTypes
    {
        private static List<TrainingAircraftType> types= new List<TrainingAircraftType>();
        //adds a type to the list
        public static void AddAircraftType(TrainingAircraftType type)
        {
            types.Add(type);
        }
        //returns all aircraft types
        public static List<TrainingAircraftType> GetAircraftTypes()
        {
            return types;
        }
        //returns an aircraft type
        public static TrainingAircraftType GetAircraftType(string name)
        {
            return types.Find(t => t.Name == name);
        }
        //clears the list of aircrafts 
        public static void Clear()
        {
            types.Clear();
        }
       
    }
}
