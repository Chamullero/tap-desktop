
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlineModel
{
    /*! Airlines Fees Type.
     * This class is used for the fees values for an airline.
     * The class needs no parameters
     */
    [Serializable]
    public class AirlineFees : ISerializable
    {
        [Versioning("fees")]
        private Dictionary<FeeType, double> Fees;
        public AirlineFees()
        {
            this.Fees = new Dictionary<FeeType, double>();

            foreach (FeeType type in FeeTypes.GetTypes())
                this.Fees.Add(type, type.DefaultValue);

        }
        //returns the value of a specific fee type
        public double getValue(FeeType type)
        {
            lock (this.Fees)
            {
                if (!this.Fees.ContainsKey(type))
                {
                    this.Fees.Add(type, type.DefaultValue);
                }
            }

            return this.Fees[type];

        }
        //sets the value of a specific fee type
        public void setValue(FeeType type, double value)
        {
            this.Fees[type] = value;
        }
        private AirlineFees(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
}
