
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel.WeatherModel
{
    //the class for the weather for an hour
    [Serializable]
    public class HourlyWeather : ISerializable
    {
        [Versioning("temperature")]
        public double Temperature { get; set; }
        [Versioning("precip")]
        public Weather.Precipitation Precip { get; set; }
        [Versioning("cover")]
        public Weather.CloudCover Cover { get; set; }
        [Versioning("direction")]
        public Weather.WindDirection Direction { get; set; }
        [Versioning("windspeed")]
        public Weather.eWindSpeed WindSpeed { get; set; }
         public Boolean HasPrecip
        {
            private set { ;}
            get { return this.Cover == Weather.CloudCover.Overcast && this.Precip != Weather.Precipitation.None; }
        }
        public HourlyWeather(double temperature, Weather.CloudCover cover, Weather.Precipitation precip, Weather.eWindSpeed windspeed, Weather.WindDirection direction)
        {
            this.Temperature = temperature;
            this.Precip = precip;
            this.Cover = cover;
            this.WindSpeed = windspeed;
            this.Direction = direction;
        }
             private HourlyWeather(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
}
