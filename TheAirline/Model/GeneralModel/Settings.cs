
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel
{
    //the class for some game settings
    [Serializable]
    public class Settings : ISerializable
    {
        private static Settings Instance;
        //the setting for which kind of airport code to show
        public enum AirportCode { IATA, ICAO }
        [Versioning("airportcode")]
        public AirportCode AirportCodeDisplay { get; set; }
        [Versioning("difficulty")]
        public Difficulty DifficultyDisplay { get; set; }
        //the setting for receiving mails on landings
        [Versioning("mailsonlandings")]
        public Boolean MailsOnLandings { get; set; }
        [Versioning("mailsonweather")]
        public Boolean MailsOnBadWeather { get; set; }
        [Versioning("mailsonroutes")]
        public Boolean MailsOnAirlineRoutes { get; set; }
        [Versioning("minutes")]
        public int MinutesPerTurn { get; set; }
        [Versioning("currencyshorten")]
        public Boolean CurrencyShorten { get; set; }
        public enum Difficulty { Easy, Normal, Hard }

        public enum ScreenMode {Fullscreen, Windowed}
        [Versioning("mode")]
        public ScreenMode Mode { get; set; }
        [Versioning("gamespeed")]
        public GeneralHelpers.GameSpeedValue GameSpeed { get; private set; }

        public enum Intervals { Daily, Monthly, Yearly, Never }
        [Versioning("autosave")]
        public Intervals AutoSave { get; set; }
        [Versioning("clearstats")]
        public Intervals ClearStats { get; set; }

        private Settings()
        {
            this.AirportCodeDisplay = AirportCode.IATA;
            this.DifficultyDisplay = Difficulty.Normal;
            this.GameSpeed = GeneralHelpers.GameSpeedValue.Normal;
            this.MailsOnLandings = false;
            this.MailsOnAirlineRoutes = false;
            this.MailsOnBadWeather = true;
            this.MinutesPerTurn = 60;
            this.CurrencyShorten = true;
            this.Mode = ScreenMode.Windowed;

            this.ClearStats = Intervals.Monthly;
            this.AutoSave = Intervals.Never;
        }
        //returns the settings instance
        public static Settings GetInstance()
        {
            if (Instance == null)
                Instance = new Settings();
            return Instance;
        }
        public static void SetInstance(Settings instance)
        {
            Instance = instance;
        }

        //sets the speed of the game
        public void setGameSpeed(GeneralHelpers.GameSpeedValue gameSpeed)
        {
            this.GameSpeed = gameSpeed;
        }
           private Settings(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
      
    }
}
