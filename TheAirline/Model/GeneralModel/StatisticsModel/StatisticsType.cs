
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel.StatisticsModel
{
    //the class for a type of statistics
    [Serializable]
    public class StatisticsType : ISerializable
    {
        [Versioning("name")]
        public string Name { get; set; }
        [Versioning("shortname")]
        public string Shortname { get; set; }
        public StatisticsType(string name, string shortname)
        {
            this.Name = name;
            this.Shortname = shortname;
        }
             private StatisticsType(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    //the collection of statistics types
    public class StatisticsTypes
    {
        private static Dictionary<string, StatisticsType> types = new Dictionary<string, StatisticsType>();
        //clears the list
        public static void Clear()
        {
            types = new Dictionary<string, StatisticsType>();
        }
        //adds a type to the collection
        public static void AddStatisticsType(StatisticsType type)
        {
            types.Add(type.Shortname, type);
        }
        //return a statistics type
        public static StatisticsType GetStatisticsType(string name)
        {
            return types[name];
        }
        //returns the list of types
        public static List<StatisticsType> GetStatisticsTypes()
        {
            return types.Values.ToList();
        }
    }
}
