
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel
{
    [Serializable]
     public class CalendarItem : ISerializable
    {
        [Versioning("header")]
        public string Header { get; set; }
        [Versioning("date")]
        public DateTime Date { get; set; }
        [Versioning("subject")]
        public string Subject { get; set; }
        public enum ItemType { Holiday, Airliner_Order, Airport_Opening, Airport_Closing }
        [Versioning("type")]
        public ItemType Type { get; set; }
        public CalendarItem(ItemType type, DateTime date, string header, string subject)
        {
            this.Type = type;
            this.Header = header;
            this.Date = date;
            this.Subject = subject;
        }
             private CalendarItem(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }

    }
    public class CalendarItems
    {
        private static List<CalendarItem> items = new List<CalendarItem>();
        //adds a calendar item to the list
        public static void AddCalendarItem(CalendarItem item)
        {
            items.Add(item);
        }
        //returns all calendar items for a date
        public static List<CalendarItem> GetCalendarItems(DateTime date)
        {
            return items.FindAll(i => i.Date.ToShortDateString() == date.ToShortDateString());
        }
        //returns all calendar items
        public static List<CalendarItem> GetCalendarItems()
        {
            return items;
        }
        //clears the list of calendar items
        public static void Clear()
        {
            items.Clear();
        }
    }

}
