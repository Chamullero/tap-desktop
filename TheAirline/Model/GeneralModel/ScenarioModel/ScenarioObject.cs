
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;

namespace TheAirline.Model.GeneralModel.ScenarioModel
{
    //the actually scenario used in a game
       [Serializable]
     public class ScenarioObject : ISerializable
    {
           [Versioning("scenario")]
           public Scenario Scenario { get; set; }
           [Versioning("scenariofailed")]
           public ScenarioFailure ScenarioFailed { get; set; }
           [Versioning("success")]
           public Boolean IsSuccess { get; set; }
           [Versioning("failures")]
           private List<ScenarioFailureObject> Failures;
        public ScenarioObject(Scenario scenario)
        {
            this.Scenario = scenario;
            this.IsSuccess = false;
            this.Failures = new List<ScenarioFailureObject>();

            foreach (ScenarioFailure failure in this.Scenario.Failures)
                this.Failures.Add(new ScenarioFailureObject(failure));
        }
        //returns a scenario failure object
        public ScenarioFailureObject getScenarioFailure(ScenarioFailure failure)
        {
            return this.Failures.Find(f => f.Failure == failure);
        }
        //returns all scenario failure objects
        public List<ScenarioFailureObject> getScenarioFailures()
        {
            return this.Failures;
        }
                private ScenarioObject(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
    [Serializable]
    //the object for a scenario failure
    public class ScenarioFailureObject : ISerializable
    {
        [Versioning("failure")]
        public ScenarioFailure Failure { get; set; }
        [Versioning("failures")]
        public int Failures { get; set; }
        [Versioning("lastfailure")]
        public DateTime LastFailureTime { get; set; }
        public ScenarioFailureObject(ScenarioFailure failure)
        {
            this.Failure = failure;
            this.Failures = 0;
        }
             private ScenarioFailureObject(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
}
