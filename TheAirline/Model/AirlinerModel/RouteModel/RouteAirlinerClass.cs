
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel.RouteModel
{
    
    /*! Route airliner class for passengers.
    * This class is used for an airliner class onboard of a route airliner for passengers
    * The class needs parameters for type of class and the fare price
    */
       [Serializable]
     public class RouteAirlinerClass : ISerializable
    {
        // chs, 2011-18-10 added seating type to a route airliner class
        public enum SeatingType { Reserved_Seating, Free_Seating }
        [Versioning("seating")]
        public SeatingType Seating { get; set; }
        [Versioning("fareprice")]
        public double FarePrice { get; set; }
           [Versioning("facilities")]
        public List<RouteFacility> Facilities { get; set; }
        [Versioning("type")]
        public AirlinerClass.ClassType Type { get; set; }
        //public int CabinCrew { get; set; }
        
        public RouteAirlinerClass(AirlinerClass.ClassType type,SeatingType seating, double fareprice)
        {
            this.Facilities = new List<RouteFacility>();
            this.FarePrice =  fareprice;
            this.Seating =  seating;
            this.Type = type;
        }
        //adds a facility to the route class
        public void addFacility(RouteFacility facility)
        {
            if (facility != null)
            {
                if (this.Facilities.Exists(f => f.Type == facility.Type))
                    this.Facilities.RemoveAll(f => f.Type == facility.Type);

                this.Facilities.Add(facility);
            }
        }
        //returns the facility for a type for the route class
        public RouteFacility getFacility(RouteFacility.FacilityType type)
        {
            return this.Facilities.Find(f => f.Type == type);
        }
        //returns all facilities
        public List<RouteFacility> getFacilities()
        {
            return this.Facilities;
        }
   private RouteAirlinerClass(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }

    }
  
}
