
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.AirlineModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel.RouteModel
{
    //the class for the in flight facilities on a route
    [Serializable]
    public class RouteFacility : ISerializable
    {
        public enum ExpenseType { Random, Fixed }
        [Versioning("etype")]
        public ExpenseType EType { get; set; }
        [Versioning("expensesperpassenger")]
        public double ExpensePerPassenger { get; set; }
        public enum FacilityType { Food, Drinks, Alcoholic_Drinks, Newspapers = 1950, Magazines = 1955, WiFi = 2007 }
        [Versioning("type")]
        public FacilityType Type { get; set; }
        [Versioning("name")]
        public string Name { get; set; }
        [Versioning("servicelevel")]
        public int ServiceLevel { get; set; }
        [Versioning("feetype")]
        public FeeType FeeType { get; set; }
        [Versioning("uid")]
        public string Uid { get; set; }
        [Versioning("requires")]
        public AirlineFacility Requires { get; set; }
        public RouteFacility(string uid, FacilityType type, string name, int serviceLevel, ExpenseType eType, double expense, FeeType feeType) : this(uid,type,name,serviceLevel,eType,expense,feeType,null)
        {
        }
        public RouteFacility(string uid, FacilityType type, string name, int serviceLevel, ExpenseType eType, double expense, FeeType feeType,AirlineFacility requires)
        {
            this.Type = type;
            this.Name = name;
            this.Uid = uid;
            this.ServiceLevel = serviceLevel;
            this.EType = eType;
            this.ExpensePerPassenger = expense;
            this.FeeType = feeType;
            this.Requires = requires;
        }
           private RouteFacility(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }

    }
    //the list of facilities for each type
    public class RouteFacilities
    {
        private static List<RouteFacility> facilities = new List<RouteFacility>();
        //private static Dictionary<RouteFacility.FacilityType, List<RouteFacility>> facilities = new Dictionary<RouteFacility.FacilityType, List<RouteFacility>>();
        //clears the list
        public static void Clear()
        {
            facilities = new List<RouteFacility>();
        }
        //adds a facility to the list
        public static void AddFacility(RouteFacility facility)
        {
            facilities.Add(facility);
        }
        //returns all facilities
        public static List<RouteFacility> GetFacilities()
        {
            return facilities;
        }
        //returns all facilities for a specific type
        public static List<RouteFacility> GetFacilities(RouteFacility.FacilityType type)
        {
            return facilities.FindAll(f => f.Type == type);
        }
        //Return all facilities
        public static List<RouteFacility> GetAllFacilities()
        {
            return facilities;
        }
        //returns the basic facility for a specific type
        public static RouteFacility GetBasicFacility(RouteFacility.FacilityType type)
        {
            return facilities.FindAll(f => f.Type == type).OrderBy(f => f.ServiceLevel).First();
        }
        //returns the facility with an uid
        public static RouteFacility GetFacility(string uid)
        {
            return facilities.Find(f => f.Uid == uid);
        }
    }
}
