
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.AirportModel;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel.RouteModel
{
    /*! RouteEntryDestination.
  * This is used for destination for the route.
  * The class needs parameter for the destination airport and the flight code
  */
    [Serializable]
    public class RouteEntryDestination : IComparable<RouteEntryDestination>, ISerializable
    {
        [Versioning("airport")]
        public Airport Airport { get; set; }
        [Versioning("flightcode")]
        public string FlightCode { get; set; }
        [Versioning("gate")]
        public Gate Gate { get; set; }
        public RouteEntryDestination(Airport airport, string flightCode)
            : this(airport, flightCode, null)
        {
        }
        public RouteEntryDestination(Airport airport, string flightCode, Gate inboundgate)
        {
            this.Airport = airport;
            this.FlightCode = flightCode;
            this.Gate = inboundgate;


        }

        public int CompareTo(RouteEntryDestination entry)
        {
            int compare = entry.FlightCode.CompareTo(this.FlightCode);
            if (compare == 0)
                return entry.Airport.Profile.IATACode.CompareTo(this.Airport.Profile.IATACode);
            return compare;
        }
           private RouteEntryDestination(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }
}
