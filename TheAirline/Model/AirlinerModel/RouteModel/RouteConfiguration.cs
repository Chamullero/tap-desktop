
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using TheAirline.Model.GeneralModel;

namespace TheAirline.Model.AirlinerModel.RouteModel
{ 
    //the class for the configuration for a route classes
   [Serializable]
    public class RouteClassesConfiguration : Configuration
    {
       [Versioning("classes")]
        private List<RouteClassConfiguration> Classes;
        public RouteClassesConfiguration(string name,Boolean standard)
            : base(ConfigurationType.Routeclasses, name,standard)
        {
            this.Classes = new List<RouteClassConfiguration>();
        }
        //adds a class to the configuration
        public void addClass(RouteClassConfiguration routeclass)
        {
            if (this.Classes.Exists(c => c.Type == routeclass.Type))
                this.Classes.RemoveAll(c => c.Type == routeclass.Type);
            this.Classes.Add(routeclass);
        }
        //returns all route classes
        public List<RouteClassConfiguration> getClasses()
        {
            return this.Classes;
        }
          private RouteClassesConfiguration(SerializationInfo info, StreamingContext ctxt) : base(info,ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public new void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

            base.GetObjectData(info, context);

        }
        
    }
    //the class for the configuration for a route class
    [Serializable]
    public class RouteClassConfiguration : ISerializable
    {
         [Versioning("type")]
       public AirlinerClass.ClassType Type { get; set; }
      [Versioning("facilities")]
          private List<RouteFacility> Facilities;
        public RouteClassConfiguration(AirlinerClass.ClassType type)
        {
            this.Type = type;
            this.Facilities = new List<RouteFacility>();
        }
        //adds a facility to the configuration
        public void addFacility(RouteFacility facility)
        {
            if (this.Facilities.Exists(f => f.Type == facility.Type))
                this.Facilities.RemoveAll(f => f.Type == facility.Type);

            this.Facilities.Add(facility);
        }
        //returns the facility for a specific type
        public RouteFacility getFacility(RouteFacility.FacilityType type)
        {
            return this.Facilities.Find(f => f.Type == type);
        }
        //returns all facilities
        public List<RouteFacility> getFacilities()
        {
            return this.Facilities;
        }
           private RouteClassConfiguration(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }
    }

}
