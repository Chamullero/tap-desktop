using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TheAirline.Model.AirportModel;
using TheAirline.Model.AirlinerModel;
using TheAirline.Model.AirlinerModel.RouteModel;
using TheAirline.Model.GeneralModel;
using TheAirline.Model.GeneralModel.StatisticsModel;
using TheAirline.Model.GeneralModel.InvoicesModel;
using TheAirline.Model.AirlineModel.SubsidiaryModel;
using TheAirline.Model.PilotModel;
using TheAirline.Model.AirlineModel;
using System.Reflection;
using System.Runtime.Serialization;


namespace TheAirline.Model.AirlinerModel
{
    [Serializable]
    public class AirlinerInsurance : ISerializable
    {
        public enum InsuranceType { Liability, Ground_Parked, Ground_Taxi,Combined_Ground, In_Flight, Full_Coverage }
        public enum InsuranceScope { Airport, Domestic, Hub, Global }
        public enum PaymentTerms { Annual, Biannual, Quarterly, Monthly }
        [Versioning("instype")]
        public InsuranceType InsType { get; set; }
        [Versioning("insscope")]
        public InsuranceScope InsScope { get; set; }
        [Versioning("insterms")]
        public PaymentTerms insTerms { get; set; }
        [Versioning("insuredamount")]
        public int InsuredAmount { get; set; }
        [Versioning("deductible")]
        public double Deductible { get; set; }
        [Versioning("termlength")]
        public int TermLength { get; set; }
        [Versioning("paymentamount")]
        public double PaymentAmount { get; set; }
        [Versioning("cancellation")]
        public int CancellationFee { get; set; }
        [Versioning("policyindex")]
        public string PolicyIndex { get; set; }
        [Versioning("insuranceeffective")]
        public DateTime InsuranceEffective { get; set; }
         [Versioning("insuranceexpires")]
        public DateTime InsuranceExpires { get; set; }
          [Versioning("nextpaymentdue")]
       public DateTime NextPaymentDue { get; set; }
          [Versioning("remainingpayments")]
          public int RemainingPayments { get; set; }
        public AirlinerInsurance(InsuranceType insType, InsuranceScope insScope, PaymentTerms paymentTerms, int insAmount)
        {
            this.Deductible = 0;
            this.TermLength = 0;
            this.CancellationFee = 0;
            this.InsuredAmount = insAmount;
        }
         private AirlinerInsurance(SerializationInfo info, StreamingContext ctxt)
        {
            int version = info.GetInt16("version");

            IList<PropertyInfo> props = new List<PropertyInfo>(this.GetType().GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null && ((Versioning)p.GetCustomAttribute(typeof(Versioning))).AutoGenerated));

            foreach (SerializationEntry entry in info)
            {
                PropertyInfo prop = props.FirstOrDefault(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Name == entry.Name);


                if (prop != null)
                    prop.SetValue(this, entry.Value);
            }

            var notSetProps = props.Where(p => ((Versioning)p.GetCustomAttribute(typeof(Versioning))).Version > version);

            foreach (PropertyInfo prop in notSetProps)
            {
                Versioning ver = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                if (ver.AutoGenerated)
                    prop.SetValue(this, ver.DefaultValue);

            }




        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("version", 1);

            Type myType = this.GetType();
            IList<PropertyInfo> props = new List<PropertyInfo>(myType.GetProperties().Where(p => p.GetCustomAttribute(typeof(Versioning)) != null));

            foreach (PropertyInfo prop in props)
            {
                object propValue = prop.GetValue(this, null);

                Versioning att = (Versioning)prop.GetCustomAttribute(typeof(Versioning));

                info.AddValue(att.Name, propValue);
            }

        }


     
    }
}
